"""Help Command Register and Handle"""

from json import load
from math import ceil

from discord import Client
from discord import Object
from discord import Interaction
from discord import Embed
from discord import Color
from discord import ButtonStyle
from discord.ui import View
from discord.ui import Button

COMMANDS = []
COMMANDS_PAGE = 0
COMMANDS_PER_PAGE = 3

try:
    with open('data/commands.json', 'r', encoding='utf-8') as file:
        COMMANDS = load(file)
        COMMANDS_PAGE = ceil(len(COMMANDS) / COMMANDS_PER_PAGE)
except Exception as e:
    print("Error occurs while fetching commands list.", e)


def create_help_embed(page=1):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Help
    """
    embed = Embed(
        title="ü§ñ PSCP Bot Command Center",
        description=(
            "> ‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏ß‡πà‡∏≤‡∏ö‡∏≠‡∏ó‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á? ‡∏°‡∏≤‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏•‡∏¢!\n"
            "> ‡πÉ‡∏ä‡πâ `/help [‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á]` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î üí°"
        ),
        color=Color.from_rgb(47, 49, 54)  # ‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏ö‡∏ö Discord
    )

    # ‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    if len(COMMANDS) == 0:
        embed.add_field(
            name="‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á",
            value="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            inline=False
        )
    else:
        start = (page - 1) * COMMANDS_PER_PAGE
        end = start + COMMANDS_PER_PAGE
        page_commands = COMMANDS[start:end]
        
        for command in page_commands:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
            description = f'```{command["description"]}```'

            if len(command["args"]) > 0:
                args = [f'[{arg["name"]}]' for arg in command["args"]]
                arg_details = "\n".join(
                    [f'> üß© `{arg["name"]}` ‚Äî {arg["description"]}' for arg in command["args"]]
                )
                description += (
                    f'\n> üí° **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**\n> `{" ".join([command["name"]] + args)}`\n'
                    f'> **Arguments**\n{arg_details}'
                )

            embed.add_field(
                name=f':sparkles: {command["name"]}',
                value=description,
                inline=False
            )

    embed.set_footer(
        text=f"üìò Page {page} of {COMMANDS_PAGE}"
    )

    return embed


def register_help_command(client: Client, guild: Object):
    """
    Registers /help command to display command list for PSCP Bot
    """
    @client.tree.command(
        name="help",
        description="‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á PSCP Bot",
        guild=guild
    )
    async def handle_help_command(interaction: Interaction):
        await interaction.response.defer(ephemeral=True)
        current_page = 1

        embed = create_help_embed(current_page)

        async def update_message(interaction: Interaction, page: int):
            """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Embed ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°"""
            embed = create_help_embed(page)
            view = create_pagination_view(page)
            await interaction.edit_original_response(embed=embed, view=view)

        def create_pagination_view(page):
            """
            ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            """
            view = View(timeout=180)

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
            prev_button = Button(
                label="‚¨ÖÔ∏è ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤",
                style=ButtonStyle.secondary,
                disabled=(page <= 1)
            )
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            next_button = Button(
                label="‚û°Ô∏è ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ",
                style=ButtonStyle.secondary,
                disabled=(page >= COMMANDS_PAGE)
            )

            async def prev_callback(i: Interaction):
                nonlocal current_page  # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡πà‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ current_page ‡∏Ç‡∏≠‡∏á function ‡∏´‡∏•‡∏±‡∏Å
                if i.user.id != interaction.user.id:
                    await i.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ", ephemeral=True)
                    return
                current_page -= 1
                await i.response.defer()
                await update_message(i, current_page)

            async def next_callback(i: Interaction):
                nonlocal current_page  # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡πà‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ current_page ‡∏Ç‡∏≠‡∏á function ‡∏´‡∏•‡∏±‡∏Å
                if i.user.id != interaction.user.id:
                    await i.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ", ephemeral=True)
                    return
                current_page += 1
                await i.response.defer()
                await update_message(i, current_page)

            prev_button.callback = prev_callback
            next_button.callback = next_callback

            view.add_item(prev_button)
            view.add_item(next_button)
            return view

        view = create_pagination_view(current_page)

        await interaction.followup.send(embed=embed, view=view, ephemeral=True)
